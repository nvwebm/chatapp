{"version":3,"sources":["components/ChatHeader.js","components/ChatMessgae.js","components/ChatArea.js","components/ChatForm.js","socket/socket.js","components/Chat.js","components/Login.js","App.js","reportWebVitals.js","index.js"],"names":["ChatHeader","props","Box","p","component","className","bgcolor","fontSize","xs","sm","display","justifyContent","ChatMessage","chatMessageBackground","chatMessageAlign","containerDirection","sender","alignItems","flexDirection","alignSelf","mb","width","borderRadius","nickname","message","ChatArea","React","forwardRef","ref","flex","overflow","messages","map","key","id","ChatForm","useState","setMessage","FormControl","fullWidth","focused","InputLabel","htmlFor","Input","onInput","event","target","value","Button","color","variant","onClick","sendMessage","socket","io","autoConnect","Chat","setMessages","messagesArea","createRef","addNewMessage","oldMessages","useEffect","handleMessageFromServer","on","forEach","height","maxHeight","members","Math","floor","random","emit","addSenderNewMessage","Login","setNickname","onNicknameSubbmitted","App","auth","connect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2146d0c.chunk.js","sourcesContent":["import { Box } from \"@material-ui/core\";\n\n/*\n  Chat header component\n*/\n\nconst ChatHeader = (props) => {\n  return (\n    <Box\n      p={2}\n      component=\"header\"\n      className=\"App-header\"\n      bgcolor=\"primary.main\"\n      fontSize={{ xs: 16, sm: 20 }}\n      display=\"flex\"\n      justifyContent=\"space-between\"\n    >\n     Public Chat Room\n    </Box>\n  );\n};\n\nexport default ChatHeader;","import { Box } from \"@material-ui/core\";\nimport AccountCircleOutlinedIcon from \"@material-ui/icons/AccountCircleOutlined\";\n/*\n  Each message will be displayed by this component\n*/\n\n\nconst ChatMessage = (props) => {\n  let chatMessageBackground = \"success.main\";\n  let chatMessageAlign = \"flex-end\";\n  let containerDirection = \"row-reverse\";\n\n  if (props.sender) {\n    chatMessageBackground = \"warning.main\";\n    chatMessageAlign = \"flex-start\";\n    containerDirection = \"row\";\n  }\n\n  return (\n    <Box\n      display=\"flex\"\n      alignItems=\"center\"\n      flexDirection={containerDirection}\n      alignSelf={chatMessageAlign}\n      mb={2}\n\n    >\n      <AccountCircleOutlinedIcon />\n      <Box width={10}></Box>\n      <Box\n        bgcolor={chatMessageBackground}\n        width=\"fit-content\"\n        borderRadius={5}\n        p={1}\n      >\n        {!props.sender ? (\n          <Box fontSize={10} mb={1}>\n            {props.nickname}\n          </Box>\n        ) : null}\n        {props.message}\n      </Box>\n    </Box>\n  );\n};\n\nexport default ChatMessage;\n","import React from \"react\";\n\nimport { Box } from \"@material-ui/core\";\nimport ChatMessage from './ChatMessgae';\n\n/*\n  The chat meesages will be displayed by this component\n*/\n\nconst ChatArea = React.forwardRef((props, ref) => {\n  return (\n    <Box\n      p={2}\n      flex=\"1\"\n      component=\"section\"\n      bgcolor=\"info.main\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      overflow=\"scroll\"\n    >\n      {props.messages.map((message) => (<ChatMessage {...message} key={message.id}></ChatMessage>))}\n    </Box>\n  );\n});\n\n\nexport default ChatArea;","import { Box, Input, FormControl, InputLabel, Button } from \"@material-ui/core\";\nimport { useState } from \"react\";\n\n/*\n  The send message UI will be displayed by this component\n*/\n\nconst ChatForm = (props) => {\n  const [message, setMessage] = useState('');\n\n  const sendMessage = () => {\n    props.sendMessage(message);\n    setMessage('');\n  };\n  \n  const updateMessage = (event) => {\n      setMessage(event.target.value);\n  }\n\n  return (\n    <Box display=\"flex\" p={2}>\n      <FormControl fullWidth={true} focused={true}>\n        <InputLabel htmlFor=\"message\">Your Message</InputLabel>\n        <Input id=\"message\" onInput={updateMessage} value={message} />\n      </FormControl>\n      <Box p={1} />\n      <Button color=\"primary\" variant=\"contained\" onClick={sendMessage}> \n        Send\n      </Button>\n    </Box>\n  );\n};\n\nexport default ChatForm;\n","import { io } from \"socket.io-client\";\n\nconst URL = \"https://infinite-savannah-52075.herokuapp.com:4000\";\nconst socket = io(URL, { autoConnect: false });\n\nexport default socket;","import { Box } from \"@material-ui/core\";\nimport { useEffect, useState, createRef } from \"react\";\n\nimport ChatHeader from \"./ChatHeader\";\nimport ChatArea from \"./ChatArea\";\nimport ChatForm from \"./ChatForm\";\n\nimport socket from \"../socket/socket\";\n\nconst Chat = (props) => {\n  const [messages, setMessages] = useState([]);\n\n  const messagesArea = createRef(null);\n\n  /* Responsible to add new message to chat */\n  const addNewMessage = (message, id, nickname, sender = false) => {\n    setMessages((oldMessages) => [\n      ...oldMessages,\n      { message: message, sender, id, nickname },\n    ]);\n  };\n\n  /*  Responsible for handle new user message */\n  const addSenderNewMessage = (message) => {\n    addNewMessage(\n      message,\n      Math.floor(Math.random() * 100),\n      props.nickname,\n      true\n    );\n    socket.emit(\"new-sender-message\", {\n      nickname: props.nickname,\n      message: message,\n    });\n  };\n\n  useEffect(() => {\n    /*  Responsible to handle new message coming from server */\n    const handleMessageFromServer = (message) =>\n      addNewMessage(\n        message.message,\n        message.id,\n        message.nickname,\n        message.sender\n      );\n    /*  Event listener for old messages on new connection  */\n    socket.on(\"old-messages\", (messages) => {\n      messages.forEach(handleMessageFromServer);\n    });\n\n    /* Event Listener from new messages from other clients*/\n    socket.on(\"new-message\", (message) => {\n      handleMessageFromServer(message);\n    });\n  }, []);\n\n  return (\n    <Box\n      display=\"flex\"\n      justifyContent=\"stretch\"\n      flexDirection=\"column\"\n      height=\"100vh\"\n      maxHeight=\"100vh\"\n    >\n      <ChatHeader members={7}></ChatHeader>\n      <ChatArea messages={messages} ref={messagesArea}></ChatArea>\n      <ChatForm\n        nickname\n        sendMessage={(message) => addSenderNewMessage(message)}\n      ></ChatForm>\n    </Box>\n  );\n};\n\nexport default Chat;\n","import { Box, Input, FormControl, InputLabel, Button } from \"@material-ui/core\";\nimport { useState } from \"react\";\n\n/*\n  The login ui\n*/\n\nconst Login = (props) => {\n  const [nickname, setNickname] = useState(\"\");\n\n  const updateNickName = (event) => {\n    setNickname(event.target.value);\n  };\n\n  const submitLogin = () => {\n    props.onNicknameSubbmitted(nickname);\n  };\n\n  return (\n    <Box display=\"flex\" p={2}>\n      <FormControl fullWidth={true} focused={true}>\n        <InputLabel htmlFor=\"message\">Your nickname</InputLabel>\n        <Input id=\"message\" onInput={updateNickName} value={nickname} />\n      </FormControl>\n      <Box p={1} />\n      <Button color=\"primary\" variant=\"contained\" onClick={submitLogin}>\n        Send\n      </Button>\n    </Box>\n  );\n};\n\nexport default Login;\n","import \"./App.css\";\n\nimport { Box } from \"@material-ui/core\";\nimport { useState } from \"react\";\n\nimport Chat from \"./components/Chat\";\n\nimport socket from \"./socket/socket\";\nimport Login from \"./components/Login\";\n\nfunction App() {\n  const [nickname, setNickname] = useState(null);\n\n  /*\n  Responsible to connect to server after login\n*/\n\n  const onNicknameSubbmitted = (nickname) => {\n    socket.auth = { nickname };\n    socket.connect();\n    setNickname(nickname);\n  };\n\n  return (\n    <Box>\n      {nickname !== null ? (\n        <Chat nickname={nickname}></Chat>\n      ) : (\n        <Login onNicknameSubbmitted={onNicknameSubbmitted}> </Login>\n      )}\n    </Box>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}